# Tests for the stats module.
#
# This file contains a collection of tests for a module in the
# Standard Tcl Library. Sourcing this file into Tcl runs the tests and
# generates output for errors.  No output means no errors were found.
#
# Copyright (c) 1998-2000 by Ajuba Solutions.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @(#) $Id: stats.test,v 1.1 2000/09/19 15:03:39 welch Exp $

package require tcltest
namespace import -force ::tcltest::*

catch {namespace delete stats}

proc Stamp {tag} {
    puts stderr "[clock format [clock seconds]] [clock clicks -milliseconds] $tag"
}

set myFile [file join [file dirname [info script]] stats.tcl]
source $myFile
package require stats 1.0

test stats-1.1 {stats::countInit} {
    catch {stats::countInit} err
} {1}

set x 0
puts "incr [time {incr x} 100]"
set a(x) 0
puts "incr [time {incr a(x)} 100]"
set a(x) 0
set a(n) 0
puts "rawcount [time {
    set a(x) [expr {$a(x) + 2.4}]
    incr a(n)
} 100]"

test stats-simple {stats::count} {
    stats::countInit simple
    stats::count simple
    stats::count simple
    stats::count simple
    stats::countGet simple
} {3}
puts "simple [time {stats::count simple} 100]"

test stats-avg {stats::count} {
    stats::countInit avg
    stats::count avg 2.2
    stats::count avg 3.3
    stats::count avg 9.8
    stats::countGet avg -avg
} {5.1}

test stats-lastn {averge over lastn} {
    stats::countInit lastn -lastn 4
    stats::count lastn 2.2
    stats::count lastn 3.3
    stats::count lastn 8.6
    stats::count lastn 4.1
    stats::count lastn 6.9
    stats::count lastn 0.4
    stats::countGet lastn -avgn
} {5.0}
puts "lastn [time {stats::count lastn 2.4} 100]"

test stats-lastn {lifetime average} {
    stats::countInit lastn -lastn 4
    stats::count lastn 2.2
    stats::count lastn 3.3
    stats::count lastn 8.6
    stats::count lastn 4.1
    stats::count lastn 6.9
    stats::count lastn 0.4
    stats::countGet lastn -avg
} {4.25}
puts "lastn [time {stats::count lastn 2.4} 100]"

test stats-hist {basic histogram} {
    stats::countInit hist -hist 10
    stats::count hist 2.2
    stats::count hist 18.6
    stats::count hist 14.1
    stats::count hist 26.9
    stats::count hist 20.4
    stats::count hist 23.3
    stats::count hist 53.3
    stats::countGet hist -hist
} {0 1 1 2 2 3 5 1}
test stats-hist {histogram average} {
    stats::countInit hist -hist 10
    stats::count hist 2.2
    stats::count hist 18.6
    stats::count hist 14.1
    stats::count hist 26.9
    stats::count hist 20.4
    stats::count hist 23.3
    stats::count hist 53.3
    stats::countGet hist -avg
} {22.6857142857}
puts "hist [time {stats::count hist 2.4} 100]"

test stats-hist2x {stats::count} {
    stats::countInit hist -hist2x 10
    stats::count hist 8
    stats::count hist 18
    stats::count hist 28
    stats::count hist 38
    stats::count hist 48
    stats::count hist 58
    stats::count hist 68
    stats::count hist 78
    stats::count hist 178
    stats::count hist 478
    stats::countGet hist -hist
} {0 1 1 1 2 2 3 4 5 1 6 1}
puts "hist2x [time {stats::count hist 50} 100]"

test stats-hist10x {stats::count} {
    stats::countInit hist -hist10x 10
    stats::count hist 8
    stats::count hist 18
    stats::count hist 28
    stats::count hist 38
    stats::count hist 48
    stats::count hist 58
    stats::count hist 68
    stats::count hist 78
    stats::count hist 178
    stats::count hist 478
    stats::count hist 1478
    stats::count hist 1478000
    stats::countGet hist -hist
} {0 1 1 7 2 2 3 1 6 1}

test stats-timehist {stats::count} {
    stats::countInit hits -timehist 4
    catch {puts stderr "Pausing during timehist tests"}
    stats::count hits 2
    after [expr 4200]
    stats::count hits 4
    after [expr 4200]
    stats::count hits 8
    foreach {n v} [stats::countGet hits -hist] {
	if {$v > 0} {
	    lappend result $n $v
	}
    }
    set result
} {0 2 1 4 2 8}

puts "timehist [time {stats::count hits} 100]"

