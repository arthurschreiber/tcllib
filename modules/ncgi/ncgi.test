# Tests for the cgi module.
#
# This file contains a collection of tests for one or more of the Tcl
# built-in commands.  Sourcing this file into Tcl runs the tests and
# generates output for errors.  No output means no errors were found.
#
# Copyright (c) 1998-2000 by Scriptics Corporation.
# All rights reserved.
#
# RCS: @(#) $Id: ncgi.test,v 1.2 2000/03/10 19:54:36 ericm Exp $

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import ::tcltest::*
}

set auto_path [linsert $auto_path 0 [file dirname [info script]]]
package require ncgi 1.0

test ncgi-1.1 {ncgi::query fake query data} {
    catch {unset env(REQUEST_METHOD)}
    ncgi::query "fake=query"
    set ncgi::query
} "fake=query"

test ncgi-1.2 {ncgi::query GET} {
    set env(REQUEST_METHOD) GET
    set env(QUERY_STRING) name=value
    ncgi::query "fake=query"
    set ncgi::query
} "name=value"

test ncgi-1.3 {ncgi::query HEAD} {
    set env(REQUEST_METHOD) HEAD
    catch {unset env(QUERY_STRING)}
    ncgi::query "fake=query"
    set ncgi::query
} ""

test ncgi-1.4 {ncgi::query POST} {
    catch {unset env(QUERY_STRING)}
    set env(REQUEST_METHOD) POST
    set env(CONTENT_LENGTH) 10
    makeFile {
	source ncgi.tcl
	ncgi::query
	puts $ncgi::query
    } test1
    set f [open "|[list $::tcltest::tcltest test1]" r+]
    puts $f "name=value"
    flush $f
    gets $f line
    set line
} "name=value"

test ncgi-2.1 {ncgi::decode} {
    ncgi::decode abcdef0123
} abcdef0123

test ncgi-2.2 {ncgi::decode} {
    ncgi::decode {[abc]def$0123\x}
} {[abc]def$0123\x}

test ncgi-2.3 {ncgi::decode} {
    ncgi::decode {[a%25c]def$01%7E3\x%3D}
} {[a%c]def$01~3\x=}

test ncgi-3.1 {ncgi::encode} {
    ncgi::encode abcdef0123
} abcdef0123

test ncgi-3.2 {ncgi::encode} {
    ncgi::encode "\[abc\]def\$0123\\x"
} {%5Babc%5Ddef%240123%5Cx}

test ncgi-3.3 {ncgi::encode} {
    ncgi::encode {hello world}
} {hello+world}

test ncgi-3.4 {ncgi::encode} {
    ncgi::encode "hello\nworld\r\tbar"
} {hello%0D%0Aworld%0D%09bar}

test ncgi-4.1 {ncgi::list} {
    catch {unset env(REQUEST_METHOD)}
    ncgi::list "name=hello+world&name2=%7ewelch"
} {name {hello world} name2 ~welch}

test ncgi-4.2 {ncgi::list} {
    catch {unset env(REQUEST_METHOD)}
    ncgi::list "name=&name2"
} {name {} anonymous name2}

test ncgi-5.1 {ncgi::parse} {
    catch {unset env(REQUEST_METHOD)}
    ncgi::parse "name=&name2"
} {name anonymous}

test ncgi-5.2 {ncgi::parse} {
    catch {unset env(REQUEST_METHOD)}
    ncgi::parse "name=value&name=value2"
} {name}

test ncgi-6.1 {ncgi::input} {
    catch {unset env(REQUEST_METHOD)}
    ncgi::input "name=value&name2=value2"
} {name name2}

test ncgi-6.2 {ncgi::input} {
    catch {unset env(REQUEST_METHOD)}
    ncgi::input "nameList=value1+stuff&nameList=value2+more"
    set ncgi::value(nameList)
} {{value1 stuff} {value2 more}}

test ncgi-6.3 {ncgi::input} {
    catch {unset env(REQUEST_METHOD)}
    catch {ncgi::input "name=value&name=value2"} err
    set err
} {Multiple definitions of name encountered in input. If you're trying to do this intentionally (such as with select), the variable must have a "List" suffix.}

test ncgi-7.1 {ncgi::value} {
    catch {unset env(REQUEST_METHOD)}
    ncgi::input "nameList=val+ue&nameList=value2"
    ncgi::value nameList
} {{val ue} value2}

test ncgi-7.2 {ncgi::value} {
    catch {unset env(REQUEST_METHOD)}
    ncgi::parse "name=val+ue&name=value2"
    ncgi::value name
} {val ue}

test ncgi-7.3 {ncgi::value} {
    catch {unset env(REQUEST_METHOD)}
    ncgi::parse "name=val+ue&name=value2"
    ncgi::value noname
} {}

test ncgi-8.1 {ncgi::valuelist} {
    catch {unset env(REQUEST_METHOD)}
    ncgi::parse "name=val+ue&name=value2"
    ncgi::valuelist name
} {{val ue} value2}

test ncgi-8.2 {ncgi::value} {
    catch {unset env(REQUEST_METHOD)}
    ncgi::parse "name=val+ue&name=value2"
    ncgi::value noname
} {}

test ncgi-9.1 {ncgi::import} {
    catch {unset env(REQUEST_METHOD)}
    ncgi::input "nameList=val+ue&nameList=value2"
    ncgi::import nameList
    set nameList
} {{val ue} value2}

test ncgi-9.2 {ncgi::import} {
    catch {unset env(REQUEST_METHOD)}
    ncgi::input "nameList=val+ue&nameList=value2"
    ncgi::import nameList myx
    set myx
} {{val ue} value2}

test ncgi-9.1 {ncgi::import} {
    catch {unset env(REQUEST_METHOD)}
    ncgi::input "nameList=val+ue&nameList=value2"
    ncgi::import noname
    set noname
} {}

set URL http://www.tcltk.com/index.html
test ncgi-10.1 {ncgi::redirect} {
    set env(REQUEST_URI) http://www.scriptics.com/cgi-bin/test.cgi
    set env(REQUEST_METHOD) GET
    set env(QUERY_STRING) {}
    set env(SERVER_NAME) www.scriptics.com
    set env(SERVER_PORT) 80
    makeFile [format {
	if {[catch {
	source ncgi.tcl
	ncgi::redirect %s
	} err]} {
	    puts $err
	}
    } $URL] test1
    set f [open "|[list $::tcltest::tcltest test1]" r+]
    read $f
} "Content-Type: text/html\nLocation: $URL\n\nPlease go to <a href=\"$URL\">$URL</a>\n"

set URL /elsewhere/foo.html
set URL2 http://www.scriptics.com/elsewhere/foo.html
test ncgi-10.2 {ncgi::redirect} {
    set env(REQUEST_URI) http://www.scriptics.com/cgi-bin/test.cgi
    set env(REQUEST_METHOD) GET
    set env(QUERY_STRING) {}
    set env(SERVER_NAME) www.scriptics.com
    set env(SERVER_PORT) 80
    makeFile [format {
	if {[catch {
	source ncgi.tcl
	ncgi::redirect %s
	} err]} {
	    puts $err
	}
    } $URL] test1
    set f [open "|[list $::tcltest::tcltest test1]" r+]
    read $f
} "Content-Type: text/html\nLocation: $URL2\n\nPlease go to <a href=\"$URL2\">$URL2</a>\n"

set URL foo.html
set URL2 http://www.scriptics.com/cgi-bin/foo.html
test ncgi-10.3 {ncgi::redirect} {
    set env(REQUEST_URI) http://www.scriptics.com/cgi-bin/test.cgi
    set env(REQUEST_METHOD) GET
    set env(QUERY_STRING) {}
    set env(SERVER_NAME) www.scriptics.com
    set env(SERVER_PORT) 80
    makeFile [format {
	if {[catch {
	source ncgi.tcl
	ncgi::redirect %s
	} err]} {
	    puts $err
	}
    } $URL] test1
    set f [open "|[list $::tcltest::tcltest test1]" r+]
    read $f
} "Content-Type: text/html\nLocation: $URL2\n\nPlease go to <a href=\"$URL2\">$URL2</a>\n"

set URL foo.html
set URL2 http://www.scriptics.com/cgi-bin/foo.html
test ncgi-10.4 {ncgi::redirect} {
    set env(REQUEST_URI) /cgi-bin/test.cgi
    set env(REQUEST_METHOD) GET
    set env(QUERY_STRING) {}
    set env(SERVER_NAME) www.scriptics.com
    set env(SERVER_PORT) 80
    makeFile [format {
	if {[catch {
	source ncgi.tcl
	ncgi::redirect %s
	} err]} {
	    puts $err
	}
    } $URL] test1
    set f [open "|[list $::tcltest::tcltest test1]" r+]
    read $f
} "Content-Type: text/html\nLocation: $URL2\n\nPlease go to <a href=\"$URL2\">$URL2</a>\n"

set URL foo.html
set URL2 http://www.scriptics.com:8000/cgi-bin/foo.html
test ncgi-10.5 {ncgi::redirect} {
    set env(REQUEST_URI) /cgi-bin/test.cgi
    set env(REQUEST_METHOD) GET
    set env(QUERY_STRING) {}
    set env(SERVER_NAME) www.scriptics.com
    set env(SERVER_PORT) 8000
    makeFile [format {
	if {[catch {
	source ncgi.tcl
	ncgi::redirect %s
	} err]} {
	    puts $err
	}
    } $URL] test1
    set f [open "|[list $::tcltest::tcltest test1]" r+]
    read $f
} "Content-Type: text/html\nLocation: $URL2\n\nPlease go to <a href=\"$URL2\">$URL2</a>\n"

set URL foo.html
set URL2 https://www.scriptics.com/cgi-bin/foo.html
test ncgi-10.6 {ncgi::redirect} {
    set env(REQUEST_URI) /cgi-bin/test.cgi
    set env(REQUEST_METHOD) GET
    set env(QUERY_STRING) {}
    set env(SERVER_NAME) www.scriptics.com
    set env(SERVER_PORT) 443
    set env(HTTPS) "on"
    makeFile [format {
	if {[catch {
	source ncgi.tcl
	ncgi::redirect %s
	} err]} {
	    puts $err
	}
    } $URL] test1
    set f [open "|[list $::tcltest::tcltest test1]" r+]
    read $f
} "Content-Type: text/html\nLocation: $URL2\n\nPlease go to <a href=\"$URL2\">$URL2</a>\n"

test ncgi-11.1 {ncgi::header} {
    makeFile {
	if {[catch {
	source ncgi.tcl
	ncgi::header
	} err]} {
	    puts $err
	}
    } test1
    set f [open "|[list $::tcltest::tcltest test1]" r+]
    read $f
} "Content-Type: text/html\n\n"

test ncgi-11.1 {ncgi::header} {
    makeFile {
	if {[catch {
	source ncgi.tcl
	ncgi::header text/plain
	} err]} {
	    puts $err
	}
    } test1
    set f [open "|[list $::tcltest::tcltest test1]" r+]
    read $f
} "Content-Type: text/plain\n\n"

test ncgi-11.1 {ncgi::header} {
    makeFile {
	if {[catch {
	source ncgi.tcl
	ncgi::header text/html X-Comment "This is a test"
	} err]} {
	    puts $err
	}
    } test1
    set f [open "|[list $::tcltest::tcltest test1]" r+]
    read $f
} "Content-Type: text/html\nX-Comment: This is a test\n\n"

::tcltest::cleanupTests
